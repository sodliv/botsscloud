# imports de blibliotecas e suas funcoes essenciais
# = do selenium pra automatizacao, do pandas pra importacao de dados da planilha, e do webdriver do chrome pro acesso a ele)
import time
import pandas as pd
import pyautogui
import keyboard as k
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import os
import warnings
from selenium.webdriver import ActionChains
warnings.filterwarnings("ignore", category=UserWarning, module="openpyxl")
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup


###################################################################################################################################################

# config chrome (o abre maximizado)
chrome_options = Options()
chrome_options.add_argument("--start-maximized")  # Abre o navegador maximizado
                        #chrome_options.add_argument("--headless") = add esta linha se quiser que o processo seja hide

# inicia driver chrome
service = Service(ChromeDriverManager().install())
driver = webdriver.Chrome(service=service, options=chrome_options)

# variavel pros dados de login
url_login = "https://www.sccloud.com.br/smartbundy/index.php/S4/dashboard/view"
usuario = "solon"
senha = "solon1010"

###################################################################################################################################################

# acessa o url do sistema sscloud
driver.get(url_login)
print("‚è∞: Acessando o sistema...")

WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "input-9")))
print("‚úÖ: Site acessado. Seguindo para Login...")

# bota usuario
print("Fazendo login...")
teste = driver.find_element(By.ID, "input-9").send_keys(usuario)
print("‚úÖ: Usuario colocado.")

# bColoca a senha
WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, "password")))
driver.find_element(By.ID, "input-12").send_keys(senha)
print("‚úÖ: Senha inserida.")

botao_entrar = WebDriverWait(driver, 10).until(
    EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'Entrar') or contains(., ' Entrar ') or @type='submit']"))
)
url_antes = driver.current_url
driver.execute_script("arguments[0].click();", botao_entrar)

print("‚úÖ: Sistema acessado com sucesso. Prosseguindo para sua edi√ß√£o... ")

time.sleep(2)

###################################################################################################################################################

# indo p ponto
print("Indo para √°rea de Tratamento de Ponto...")
driver.get("https://www.sccloud.com.br/smartbundy/index.php/FolhaPonto/tratamentoForm/_OBJ/mod_tratar_marcacoes/_SC_USER/solon")

###################################################################################################################################################

# exporta os dados da planilha selecionada
print("Carregando dados da planilha...")
df = pd.read_excel(r'C:\\Users\\Solon\\OneDrive\\√Årea de Trabalho\\Matriz entrevista de Absente√≠smo222.xlsx')

# busca na planilha pelos titulos de coluna requeridos e por seu respectivo conteudo em loop
df['Data'] = pd.to_datetime(df['Data'], errors='coerce')  # transforma strings em datetime

for index, row in df.iterrows():
    nome = row['Nome']

    data = row['Data']
    if pd.notnull(data):
        data_str = data.strftime('%d/%m/%Y')
    else:
        data_str = ''

    motivo = row['Motivo']

    print(f"\nSelecionando: {data}...")

    try:
        # (1: Preenchendo a data do atestado)
        campo_data1 = WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.ID, "data_inicial"))
        )
        campo_data1.clear()
        campo_data1.send_keys(data_str)

        campo_data2 = WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.ID, "data_final"))
        )
        campo_data2.clear()
        campo_data2.send_keys(data_str)

        print(f"‚úÖ: Registro do dia '{data}' conforme prescrito no devido atestado selecionado! Prosseguindo...")

        # (2: Preenchendo o nome do colaborador)
        campo_filtro = WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.ID, '_colaborador_filtro'))
        )
        campo_filtro.clear()
        campo_filtro.send_keys(nome)
        print(f"‚úÖ: Colaborador '{nome}' tamb√©m selecionado com sucesso! Ainda prosseguindo...")

        # (3: Apertando bot√£o para sele√ß√£o de colaborador)
        botao_pesquisar = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.XPATH, '//*[@id="pesquisar"]/input'))
        )
        actions = ActionChains(driver)
        actions.move_to_element(botao_pesquisar).click().perform()
        time.sleep(2)
        print(f"üìå Adentrando na edi√ß√£o do colaborador '{nome}'...")


        # (4: Clicando em "Lancar atestados/ausencias)
        a, b = 503, 803 # coordenada do bot√£o em quest√£o
        botao_lancar = pyautogui.click(a, b)
        time.sleep(2)
        print(f"üìå Acessando o Tratamento de Aus√™ncias de'{nome}'...")
        
        # (5: Clicando no segundo campo referente a data do atestado)
        c, d = 215, 480 # coordenada do campo 1
        e, f = 296, 480 # coordenada do campo 2

        campo_data_inicio = pyautogui.click(c, d)
        time.sleep(1)
        pyautogui.write(data_str)
        time.sleep(1)
        campo_data_fim = pyautogui.click(e, f)
        time.sleep(1)
        pyautogui.write(data_str)
        time.sleep(1)
        
        print(f"üìå Colocando a respectiva data do documento de Atestado M√©dico em quest√£o do colaborador '{nome}'...")
 
        # (6: Escolhendo o motivo de aus√™ncia)
        # clicando em bot√£o:
        g, h = 645, 480 # coordenada do bot√£o de motivo
        botao_motivo = pyautogui.click(g, h)
        0,5
        # esoclhendo motivo:
        i, j = 622, 61
        kk, l = 633, 300
        m, n = 633, 327
        o, p = 682, 348
        if motivo == 'Abono Legal':
            opcao_abono_legal = pyautogui.click(i,j)
        elif motivo == 'Atestado (aus√™ncia parcial)':
            opcao_atestado_parcial = pyautogui.click(kk, l)
        elif motivo == 'Atestado (dia inteiro)':
            opcao_atestado_inteiro = pyautogui.click(m, n)
        elif motivo == 'Abona DSR':
            opcao_abono_dr =pyautogui.click(o, p)
        else:
            print ("Motivo n√£o existente.")
        time.sleep(1)

        # (7: Salvando altera√ß√µes)
        q, r = 673, 570
        s, t = 1297, 473
        u, v = 619, 556
        y, z = 1343, 254
        cc, ss = 1387, 185

        rolar_tela = pyautogui.click(q, r)
        time.sleep(0.8)
        k.press_and_release('right')
        time.sleep(0.8)
        botao_salvar = pyautogui.click(s, t)
        time.sleep(0.8)
        botao_salvar_confirmacao_ok = pyautogui.click(u, v)
        time.sleep(0.8)
        botao1_fechar_edicao = pyautogui.click(y, z)
        time.sleep(0.8)
        botao2_fechar_edicao = pyautogui.click(cc, ss)

        print ("Documento de Atestado M√©dico do colaborador '{nome}' adicionado com sucesso!")
        continue


    except Exception as e:
        print ("Processo finalizado. Todos os documentos de Atestado  dos referentes colaboradores da planilha foram adicionados")
